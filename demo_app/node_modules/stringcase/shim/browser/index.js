/**
 * Convert string cases between camel case, pascal case, snake case etc...
 * @module stringcase
 */
'use strict';

var camelcase = require('./camelcase');

var capitalcase = require('./capitalcase');

var constcase = require('./constcase');

var cramcase = require('./cramcase');

var decapitalcase = require('./decapitalcase');

var dotcase = require('./dotcase');

var enumcase = require('./enumcase');

var lowercase = require('./lowercase');

var pascalcase = require('./pascalcase');

var pathcase = require('./pathcase');

var sentencecase = require('./sentencecase');

var snakecase = require('./snakecase');

var spacecase = require('./spacecase');

var spinalcase = require('./spinalcase');

var titlecase = require('./titlecase');

var trimcase = require('./trimcase');

var uppercase = require('./uppercase');

exports.camelcase = camelcase;
exports.capitalcase = capitalcase;
exports.constcase = constcase;
exports.cramcase = cramcase;
exports.decapitalcase = decapitalcase;
exports.dotcase = dotcase;
exports.enumcase = enumcase;
exports.lowercase = lowercase;
exports.pascalcase = pascalcase;
exports.pathcase = pathcase;
exports.sentencecase = sentencecase;
exports.snakecase = snakecase;
exports.spacecase = spacecase;
exports.spinalcase = spinalcase;
exports.titlecase = titlecase;
exports.trimcase = trimcase;
exports.uppercase = uppercase;
module.exports = {
  camelcase: camelcase,
  capitalcase: capitalcase,
  constcase: constcase,
  cramcase: cramcase,
  decapitalcase: decapitalcase,
  dotcase: dotcase,
  enumcase: enumcase,
  lowercase: lowercase,
  pascalcase: pascalcase,
  pathcase: pathcase,
  sentencecase: sentencecase,
  snakecase: snakecase,
  spacecase: spacecase,
  spinalcase: spinalcase,
  titlecase: titlecase,
  trimcase: trimcase,
  uppercase: uppercase
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImNhbWVsY2FzZSIsInJlcXVpcmUiLCJjYXBpdGFsY2FzZSIsImNvbnN0Y2FzZSIsImNyYW1jYXNlIiwiZGVjYXBpdGFsY2FzZSIsImRvdGNhc2UiLCJlbnVtY2FzZSIsImxvd2VyY2FzZSIsInBhc2NhbGNhc2UiLCJwYXRoY2FzZSIsInNlbnRlbmNlY2FzZSIsInNuYWtlY2FzZSIsInNwYWNlY2FzZSIsInNwaW5hbGNhc2UiLCJ0aXRsZWNhc2UiLCJ0cmltY2FzZSIsInVwcGVyY2FzZSIsImV4cG9ydHMiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBS0E7O0FBR0EsSUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUF6Qjs7QUFDQSxJQUFNQyxXQUFXLEdBQUdELE9BQU8sQ0FBQyxlQUFELENBQTNCOztBQUNBLElBQU1FLFNBQVMsR0FBR0YsT0FBTyxDQUFDLGFBQUQsQ0FBekI7O0FBQ0EsSUFBTUcsUUFBUSxHQUFHSCxPQUFPLENBQUMsWUFBRCxDQUF4Qjs7QUFDQSxJQUFNSSxhQUFhLEdBQUdKLE9BQU8sQ0FBQyxpQkFBRCxDQUE3Qjs7QUFDQSxJQUFNSyxPQUFPLEdBQUdMLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBLElBQU1NLFFBQVEsR0FBR04sT0FBTyxDQUFDLFlBQUQsQ0FBeEI7O0FBQ0EsSUFBTU8sU0FBUyxHQUFHUCxPQUFPLENBQUMsYUFBRCxDQUF6Qjs7QUFDQSxJQUFNUSxVQUFVLEdBQUdSLE9BQU8sQ0FBQyxjQUFELENBQTFCOztBQUNBLElBQU1TLFFBQVEsR0FBR1QsT0FBTyxDQUFDLFlBQUQsQ0FBeEI7O0FBQ0EsSUFBTVUsWUFBWSxHQUFHVixPQUFPLENBQUMsZ0JBQUQsQ0FBNUI7O0FBQ0EsSUFBTVcsU0FBUyxHQUFHWCxPQUFPLENBQUMsYUFBRCxDQUF6Qjs7QUFDQSxJQUFNWSxTQUFTLEdBQUdaLE9BQU8sQ0FBQyxhQUFELENBQXpCOztBQUNBLElBQU1hLFVBQVUsR0FBR2IsT0FBTyxDQUFDLGNBQUQsQ0FBMUI7O0FBQ0EsSUFBTWMsU0FBUyxHQUFHZCxPQUFPLENBQUMsYUFBRCxDQUF6Qjs7QUFDQSxJQUFNZSxRQUFRLEdBQUdmLE9BQU8sQ0FBQyxZQUFELENBQXhCOztBQUNBLElBQU1nQixTQUFTLEdBQUdoQixPQUFPLENBQUMsYUFBRCxDQUF6Qjs7QUFFQWlCLE9BQU8sQ0FBQ2xCLFNBQVIsR0FBb0JBLFNBQXBCO0FBQ0FrQixPQUFPLENBQUNoQixXQUFSLEdBQXNCQSxXQUF0QjtBQUNBZ0IsT0FBTyxDQUFDZixTQUFSLEdBQW9CQSxTQUFwQjtBQUNBZSxPQUFPLENBQUNkLFFBQVIsR0FBbUJBLFFBQW5CO0FBQ0FjLE9BQU8sQ0FBQ2IsYUFBUixHQUF3QkEsYUFBeEI7QUFDQWEsT0FBTyxDQUFDWixPQUFSLEdBQWtCQSxPQUFsQjtBQUNBWSxPQUFPLENBQUNYLFFBQVIsR0FBbUJBLFFBQW5CO0FBQ0FXLE9BQU8sQ0FBQ1YsU0FBUixHQUFvQkEsU0FBcEI7QUFDQVUsT0FBTyxDQUFDVCxVQUFSLEdBQXFCQSxVQUFyQjtBQUNBUyxPQUFPLENBQUNSLFFBQVIsR0FBbUJBLFFBQW5CO0FBQ0FRLE9BQU8sQ0FBQ1AsWUFBUixHQUF1QkEsWUFBdkI7QUFDQU8sT0FBTyxDQUFDTixTQUFSLEdBQW9CQSxTQUFwQjtBQUNBTSxPQUFPLENBQUNMLFNBQVIsR0FBb0JBLFNBQXBCO0FBQ0FLLE9BQU8sQ0FBQ0osVUFBUixHQUFxQkEsVUFBckI7QUFDQUksT0FBTyxDQUFDSCxTQUFSLEdBQW9CQSxTQUFwQjtBQUNBRyxPQUFPLENBQUNGLFFBQVIsR0FBbUJBLFFBQW5CO0FBQ0FFLE9BQU8sQ0FBQ0QsU0FBUixHQUFvQkEsU0FBcEI7QUFFQUUsTUFBTSxDQUFDRCxPQUFQLEdBQWlCO0FBQ2ZsQixFQUFBQSxTQUFTLEVBQVRBLFNBRGU7QUFFZkUsRUFBQUEsV0FBVyxFQUFYQSxXQUZlO0FBR2ZDLEVBQUFBLFNBQVMsRUFBVEEsU0FIZTtBQUlmQyxFQUFBQSxRQUFRLEVBQVJBLFFBSmU7QUFLZkMsRUFBQUEsYUFBYSxFQUFiQSxhQUxlO0FBTWZDLEVBQUFBLE9BQU8sRUFBUEEsT0FOZTtBQU9mQyxFQUFBQSxRQUFRLEVBQVJBLFFBUGU7QUFRZkMsRUFBQUEsU0FBUyxFQUFUQSxTQVJlO0FBU2ZDLEVBQUFBLFVBQVUsRUFBVkEsVUFUZTtBQVVmQyxFQUFBQSxRQUFRLEVBQVJBLFFBVmU7QUFXZkMsRUFBQUEsWUFBWSxFQUFaQSxZQVhlO0FBWWZDLEVBQUFBLFNBQVMsRUFBVEEsU0FaZTtBQWFmQyxFQUFBQSxTQUFTLEVBQVRBLFNBYmU7QUFjZkMsRUFBQUEsVUFBVSxFQUFWQSxVQWRlO0FBZWZDLEVBQUFBLFNBQVMsRUFBVEEsU0FmZTtBQWdCZkMsRUFBQUEsUUFBUSxFQUFSQSxRQWhCZTtBQWlCZkMsRUFBQUEsU0FBUyxFQUFUQTtBQWpCZSxDQUFqQiIsInNvdXJjZVJvb3QiOiIuLi8uLi9saWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnZlcnQgc3RyaW5nIGNhc2VzIGJldHdlZW4gY2FtZWwgY2FzZSwgcGFzY2FsIGNhc2UsIHNuYWtlIGNhc2UgZXRjLi4uXG4gKiBAbW9kdWxlIHN0cmluZ2Nhc2VcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuXG5jb25zdCBjYW1lbGNhc2UgPSByZXF1aXJlKCcuL2NhbWVsY2FzZScpXG5jb25zdCBjYXBpdGFsY2FzZSA9IHJlcXVpcmUoJy4vY2FwaXRhbGNhc2UnKVxuY29uc3QgY29uc3RjYXNlID0gcmVxdWlyZSgnLi9jb25zdGNhc2UnKVxuY29uc3QgY3JhbWNhc2UgPSByZXF1aXJlKCcuL2NyYW1jYXNlJylcbmNvbnN0IGRlY2FwaXRhbGNhc2UgPSByZXF1aXJlKCcuL2RlY2FwaXRhbGNhc2UnKVxuY29uc3QgZG90Y2FzZSA9IHJlcXVpcmUoJy4vZG90Y2FzZScpXG5jb25zdCBlbnVtY2FzZSA9IHJlcXVpcmUoJy4vZW51bWNhc2UnKVxuY29uc3QgbG93ZXJjYXNlID0gcmVxdWlyZSgnLi9sb3dlcmNhc2UnKVxuY29uc3QgcGFzY2FsY2FzZSA9IHJlcXVpcmUoJy4vcGFzY2FsY2FzZScpXG5jb25zdCBwYXRoY2FzZSA9IHJlcXVpcmUoJy4vcGF0aGNhc2UnKVxuY29uc3Qgc2VudGVuY2VjYXNlID0gcmVxdWlyZSgnLi9zZW50ZW5jZWNhc2UnKVxuY29uc3Qgc25ha2VjYXNlID0gcmVxdWlyZSgnLi9zbmFrZWNhc2UnKVxuY29uc3Qgc3BhY2VjYXNlID0gcmVxdWlyZSgnLi9zcGFjZWNhc2UnKVxuY29uc3Qgc3BpbmFsY2FzZSA9IHJlcXVpcmUoJy4vc3BpbmFsY2FzZScpXG5jb25zdCB0aXRsZWNhc2UgPSByZXF1aXJlKCcuL3RpdGxlY2FzZScpXG5jb25zdCB0cmltY2FzZSA9IHJlcXVpcmUoJy4vdHJpbWNhc2UnKVxuY29uc3QgdXBwZXJjYXNlID0gcmVxdWlyZSgnLi91cHBlcmNhc2UnKVxuXG5leHBvcnRzLmNhbWVsY2FzZSA9IGNhbWVsY2FzZVxuZXhwb3J0cy5jYXBpdGFsY2FzZSA9IGNhcGl0YWxjYXNlXG5leHBvcnRzLmNvbnN0Y2FzZSA9IGNvbnN0Y2FzZVxuZXhwb3J0cy5jcmFtY2FzZSA9IGNyYW1jYXNlXG5leHBvcnRzLmRlY2FwaXRhbGNhc2UgPSBkZWNhcGl0YWxjYXNlXG5leHBvcnRzLmRvdGNhc2UgPSBkb3RjYXNlXG5leHBvcnRzLmVudW1jYXNlID0gZW51bWNhc2VcbmV4cG9ydHMubG93ZXJjYXNlID0gbG93ZXJjYXNlXG5leHBvcnRzLnBhc2NhbGNhc2UgPSBwYXNjYWxjYXNlXG5leHBvcnRzLnBhdGhjYXNlID0gcGF0aGNhc2VcbmV4cG9ydHMuc2VudGVuY2VjYXNlID0gc2VudGVuY2VjYXNlXG5leHBvcnRzLnNuYWtlY2FzZSA9IHNuYWtlY2FzZVxuZXhwb3J0cy5zcGFjZWNhc2UgPSBzcGFjZWNhc2VcbmV4cG9ydHMuc3BpbmFsY2FzZSA9IHNwaW5hbGNhc2VcbmV4cG9ydHMudGl0bGVjYXNlID0gdGl0bGVjYXNlXG5leHBvcnRzLnRyaW1jYXNlID0gdHJpbWNhc2VcbmV4cG9ydHMudXBwZXJjYXNlID0gdXBwZXJjYXNlXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjYW1lbGNhc2UsXG4gIGNhcGl0YWxjYXNlLFxuICBjb25zdGNhc2UsXG4gIGNyYW1jYXNlLFxuICBkZWNhcGl0YWxjYXNlLFxuICBkb3RjYXNlLFxuICBlbnVtY2FzZSxcbiAgbG93ZXJjYXNlLFxuICBwYXNjYWxjYXNlLFxuICBwYXRoY2FzZSxcbiAgc2VudGVuY2VjYXNlLFxuICBzbmFrZWNhc2UsXG4gIHNwYWNlY2FzZSxcbiAgc3BpbmFsY2FzZSxcbiAgdGl0bGVjYXNlLFxuICB0cmltY2FzZSxcbiAgdXBwZXJjYXNlXG59XG4iXX0=