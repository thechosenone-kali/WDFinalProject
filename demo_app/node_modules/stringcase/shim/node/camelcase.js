/**
 * Convert string into camel case.
 * @memberof module:stringcase/lib
 * @function camelcase
 * @param {string} str - String to convert.
 * @returns {string} Camel case string.
 */
'use strict';

var lowercase = require('./lowercase');

var uppercase = require('./uppercase');

var replacing = {
  from: /[\-_:\.\s]([a-zA-Z])([a-zA-Z]*)/g,
  to: function to(match, $1, $2, offset, src) {
    var len = $1.length;
    return uppercase($1) + $2;
  }
  /** @lends camelcase */

};

function camelcase(str) {
  if (camelcase.isCamelcase(str)) {
    return str;
  }

  str = String(str).replace(/^[\-_:\.\s]/, '');

  if (!str) {
    return str;
  }

  if (uppercase.isUppercase(str)) {
    str = lowercase(str);
  }

  return lowercase(str[0]) + str.replace(replacing.from, replacing.to).slice(1).replace(/^([A-Z]+)([A-Z])/, function (match, $1, $2) {
    return lowercase($1) + $2;
  });
}
/**
 * Checks whether the string are camelcase.
 * @memberof module:stringcase/lib
 * @function camelcase.isCamelcase
 * @param {string} str - String to check
 * @returns {boolean} - True if the string are camelcase.
 */


camelcase.isCamelcase = function (str) {
  return str && /^[a-zA-Z]+$/.test(str) && lowercase(str[0]) === str[0];
};

module.exports = camelcase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhbWVsY2FzZS5qcyJdLCJuYW1lcyI6WyJsb3dlcmNhc2UiLCJyZXF1aXJlIiwidXBwZXJjYXNlIiwicmVwbGFjaW5nIiwiZnJvbSIsInRvIiwibWF0Y2giLCIkMSIsIiQyIiwib2Zmc2V0Iiwic3JjIiwibGVuIiwibGVuZ3RoIiwiY2FtZWxjYXNlIiwic3RyIiwiaXNDYW1lbGNhc2UiLCJTdHJpbmciLCJyZXBsYWNlIiwiaXNVcHBlcmNhc2UiLCJzbGljZSIsInRlc3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQVFBOztBQUVBLElBQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLGFBQUQsQ0FBekI7O0FBQ0EsSUFBTUMsU0FBUyxHQUFHRCxPQUFPLENBQUMsYUFBRCxDQUF6Qjs7QUFFQSxJQUFNRSxTQUFTLEdBQUc7QUFDaEJDLEVBQUFBLElBQUksRUFBRSxrQ0FEVTtBQUVoQkMsRUFBQUEsRUFBRSxFQUFFLFlBQVVDLEtBQVYsRUFBaUJDLEVBQWpCLEVBQXFCQyxFQUFyQixFQUF5QkMsTUFBekIsRUFBaUNDLEdBQWpDLEVBQXNDO0FBQ3hDLFFBQU1DLEdBQUcsR0FBR0osRUFBRSxDQUFDSyxNQUFmO0FBQ0EsV0FBT1YsU0FBUyxDQUFDSyxFQUFELENBQVQsR0FBZ0JDLEVBQXZCO0FBQ0Q7QUFHSDs7QUFSa0IsQ0FBbEI7O0FBU0EsU0FBU0ssU0FBVCxDQUFvQkMsR0FBcEIsRUFBeUI7QUFDdkIsTUFBSUQsU0FBUyxDQUFDRSxXQUFWLENBQXNCRCxHQUF0QixDQUFKLEVBQWdDO0FBQzlCLFdBQU9BLEdBQVA7QUFDRDs7QUFDREEsRUFBQUEsR0FBRyxHQUFHRSxNQUFNLENBQUNGLEdBQUQsQ0FBTixDQUFZRyxPQUFaLENBQW9CLGFBQXBCLEVBQW1DLEVBQW5DLENBQU47O0FBQ0EsTUFBSSxDQUFDSCxHQUFMLEVBQVU7QUFDUixXQUFPQSxHQUFQO0FBQ0Q7O0FBQ0QsTUFBSVosU0FBUyxDQUFDZ0IsV0FBVixDQUFzQkosR0FBdEIsQ0FBSixFQUFnQztBQUM5QkEsSUFBQUEsR0FBRyxHQUFHZCxTQUFTLENBQUNjLEdBQUQsQ0FBZjtBQUNEOztBQUNELFNBQU9kLFNBQVMsQ0FBQ2MsR0FBRyxDQUFDLENBQUQsQ0FBSixDQUFULEdBQW9CQSxHQUFHLENBQUNHLE9BQUosQ0FBWWQsU0FBUyxDQUFDQyxJQUF0QixFQUE0QkQsU0FBUyxDQUFDRSxFQUF0QyxFQUEwQ2MsS0FBMUMsQ0FBZ0QsQ0FBaEQsRUFDeEJGLE9BRHdCLENBQ2hCLGtCQURnQixFQUNJLFVBQUNYLEtBQUQsRUFBUUMsRUFBUixFQUFZQyxFQUFaO0FBQUEsV0FBbUJSLFNBQVMsQ0FBQ08sRUFBRCxDQUFULEdBQWdCQyxFQUFuQztBQUFBLEdBREosQ0FBM0I7QUFFRDtBQUVEOzs7Ozs7Ozs7QUFPQUssU0FBUyxDQUFDRSxXQUFWLEdBQXdCLFVBQVVELEdBQVYsRUFBZTtBQUNyQyxTQUFPQSxHQUFHLElBQUksY0FBY00sSUFBZCxDQUFtQk4sR0FBbkIsQ0FBUCxJQUFtQ2QsU0FBUyxDQUFDYyxHQUFHLENBQUMsQ0FBRCxDQUFKLENBQVQsS0FBc0JBLEdBQUcsQ0FBQyxDQUFELENBQW5FO0FBQ0QsQ0FGRDs7QUFJQU8sTUFBTSxDQUFDQyxPQUFQLEdBQWlCVCxTQUFqQiIsInNvdXJjZVJvb3QiOiIuLi8uLi9saWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnZlcnQgc3RyaW5nIGludG8gY2FtZWwgY2FzZS5cbiAqIEBtZW1iZXJvZiBtb2R1bGU6c3RyaW5nY2FzZS9saWJcbiAqIEBmdW5jdGlvbiBjYW1lbGNhc2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBTdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IENhbWVsIGNhc2Ugc3RyaW5nLlxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCBsb3dlcmNhc2UgPSByZXF1aXJlKCcuL2xvd2VyY2FzZScpXG5jb25zdCB1cHBlcmNhc2UgPSByZXF1aXJlKCcuL3VwcGVyY2FzZScpXG5cbmNvbnN0IHJlcGxhY2luZyA9IHtcbiAgZnJvbTogL1tcXC1fOlxcLlxcc10oW2EtekEtWl0pKFthLXpBLVpdKikvZyxcbiAgdG86IGZ1bmN0aW9uIChtYXRjaCwgJDEsICQyLCBvZmZzZXQsIHNyYykge1xuICAgIGNvbnN0IGxlbiA9ICQxLmxlbmd0aFxuICAgIHJldHVybiB1cHBlcmNhc2UoJDEpICsgJDJcbiAgfVxufVxuXG4vKiogQGxlbmRzIGNhbWVsY2FzZSAqL1xuZnVuY3Rpb24gY2FtZWxjYXNlIChzdHIpIHtcbiAgaWYgKGNhbWVsY2FzZS5pc0NhbWVsY2FzZShzdHIpKSB7XG4gICAgcmV0dXJuIHN0clxuICB9XG4gIHN0ciA9IFN0cmluZyhzdHIpLnJlcGxhY2UoL15bXFwtXzpcXC5cXHNdLywgJycpXG4gIGlmICghc3RyKSB7XG4gICAgcmV0dXJuIHN0clxuICB9XG4gIGlmICh1cHBlcmNhc2UuaXNVcHBlcmNhc2Uoc3RyKSkge1xuICAgIHN0ciA9IGxvd2VyY2FzZShzdHIpXG4gIH1cbiAgcmV0dXJuIGxvd2VyY2FzZShzdHJbMF0pICsgc3RyLnJlcGxhY2UocmVwbGFjaW5nLmZyb20sIHJlcGxhY2luZy50bykuc2xpY2UoMSlcbiAgICAucmVwbGFjZSgvXihbQS1aXSspKFtBLVpdKS8sIChtYXRjaCwgJDEsICQyKSA9PiBsb3dlcmNhc2UoJDEpICsgJDIpXG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIHN0cmluZyBhcmUgY2FtZWxjYXNlLlxuICogQG1lbWJlcm9mIG1vZHVsZTpzdHJpbmdjYXNlL2xpYlxuICogQGZ1bmN0aW9uIGNhbWVsY2FzZS5pc0NhbWVsY2FzZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFN0cmluZyB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IC0gVHJ1ZSBpZiB0aGUgc3RyaW5nIGFyZSBjYW1lbGNhc2UuXG4gKi9cbmNhbWVsY2FzZS5pc0NhbWVsY2FzZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ciAmJiAvXlthLXpBLVpdKyQvLnRlc3Qoc3RyKSAmJiAobG93ZXJjYXNlKHN0clswXSkgPT09IHN0clswXSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbGNhc2VcbiJdfQ==