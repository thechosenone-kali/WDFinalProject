/**
 * Convert string into snake case.
 * Join punctuation with underscore.
 * @memberof module:stringcase/lib
 * @function snakecase
 * @param {string} str - String to convert.
 * @returns {string} Snake cased string.
 */
'use strict';

var lowercase = require('./lowercase');

var uppercase = require('./uppercase');

var JOINER = '_';
var replacing = {
  from: /([A-Z]+)/g,
  to: function to(match, $1, offset, src) {
    var prefix = offset === 0 ? '' : JOINER;
    var len = $1.length;

    if (len === 1) {
      return prefix + lowercase($1);
    }

    var next = src.slice(offset + $1.length);
    var isOneWord = uppercase.isUppercase($1) && next[0] === JOINER;

    if (isOneWord) {
      return prefix + lowercase($1);
    }

    var replaced = lowercase($1.substr(0, len - 1)) + JOINER + lowercase($1[len - 1]);
    return prefix + replaced;
  }
};
/** @lends snakecase */

function snakecase(str) {
  if (snakecase.isSnakecase(str)) {
    return str;
  }

  str = String(str).replace(/[\-.:\s]/g, JOINER);

  if (!str) {
    return str;
  }

  if (uppercase.isUppercase(str)) {
    str = lowercase(str);
  }

  return str.replace(replacing.from, replacing.to).replace(/_+/g, '_');
}
/**
 * Checks whether the string are snakecase.
 * @memberof module:stringcase/lib
 * @function snakecase.isSnakecase
 * @param {string} str - String to check.
 * @returns {boolean} - True if the string are snakecase.
 */


snakecase.isSnakecase = function (str) {
  return str && /^[a-z_]+$/.test(str);
};

module.exports = snakecase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNuYWtlY2FzZS5qcyJdLCJuYW1lcyI6WyJsb3dlcmNhc2UiLCJyZXF1aXJlIiwidXBwZXJjYXNlIiwiSk9JTkVSIiwicmVwbGFjaW5nIiwiZnJvbSIsInRvIiwibWF0Y2giLCIkMSIsIm9mZnNldCIsInNyYyIsInByZWZpeCIsImxlbiIsImxlbmd0aCIsIm5leHQiLCJzbGljZSIsImlzT25lV29yZCIsImlzVXBwZXJjYXNlIiwicmVwbGFjZWQiLCJzdWJzdHIiLCJzbmFrZWNhc2UiLCJzdHIiLCJpc1NuYWtlY2FzZSIsIlN0cmluZyIsInJlcGxhY2UiLCJ0ZXN0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBU0E7O0FBRUEsSUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUF6Qjs7QUFDQSxJQUFNQyxTQUFTLEdBQUdELE9BQU8sQ0FBQyxhQUFELENBQXpCOztBQUVBLElBQU1FLE1BQU0sR0FBRyxHQUFmO0FBRUEsSUFBTUMsU0FBUyxHQUFHO0FBQ2hCQyxFQUFBQSxJQUFJLEVBQUUsV0FEVTtBQUVoQkMsRUFBQUEsRUFGZ0IsY0FFWkMsS0FGWSxFQUVMQyxFQUZLLEVBRURDLE1BRkMsRUFFT0MsR0FGUCxFQUVZO0FBQzFCLFFBQU1DLE1BQU0sR0FBR0YsTUFBTSxLQUFLLENBQVgsR0FBZSxFQUFmLEdBQW9CTixNQUFuQztBQUNBLFFBQU1TLEdBQUcsR0FBR0osRUFBRSxDQUFDSyxNQUFmOztBQUNBLFFBQUlELEdBQUcsS0FBSyxDQUFaLEVBQWU7QUFDYixhQUFPRCxNQUFNLEdBQUdYLFNBQVMsQ0FBQ1EsRUFBRCxDQUF6QjtBQUNEOztBQUNELFFBQU1NLElBQUksR0FBR0osR0FBRyxDQUFDSyxLQUFKLENBQVVOLE1BQU0sR0FBR0QsRUFBRSxDQUFDSyxNQUF0QixDQUFiO0FBQ0EsUUFBTUcsU0FBUyxHQUFHZCxTQUFTLENBQUNlLFdBQVYsQ0FBc0JULEVBQXRCLEtBQTZCTSxJQUFJLENBQUMsQ0FBRCxDQUFKLEtBQVlYLE1BQTNEOztBQUNBLFFBQUlhLFNBQUosRUFBZTtBQUNiLGFBQU9MLE1BQU0sR0FBR1gsU0FBUyxDQUFDUSxFQUFELENBQXpCO0FBQ0Q7O0FBQ0QsUUFBTVUsUUFBUSxHQUNabEIsU0FBUyxDQUFDUSxFQUFFLENBQUNXLE1BQUgsQ0FBVSxDQUFWLEVBQWFQLEdBQUcsR0FBRyxDQUFuQixDQUFELENBQVQsR0FBbUNULE1BQW5DLEdBQTRDSCxTQUFTLENBQUNRLEVBQUUsQ0FBQ0ksR0FBRyxHQUFHLENBQVAsQ0FBSCxDQUR2RDtBQUVBLFdBQU9ELE1BQU0sR0FBR08sUUFBaEI7QUFDRDtBQWhCZSxDQUFsQjtBQW1CQTs7QUFDQSxTQUFTRSxTQUFULENBQW9CQyxHQUFwQixFQUF5QjtBQUN2QixNQUFJRCxTQUFTLENBQUNFLFdBQVYsQ0FBc0JELEdBQXRCLENBQUosRUFBZ0M7QUFDOUIsV0FBT0EsR0FBUDtBQUNEOztBQUNEQSxFQUFBQSxHQUFHLEdBQUdFLE1BQU0sQ0FBQ0YsR0FBRCxDQUFOLENBQVlHLE9BQVosQ0FBb0IsV0FBcEIsRUFBaUNyQixNQUFqQyxDQUFOOztBQUNBLE1BQUksQ0FBQ2tCLEdBQUwsRUFBVTtBQUNSLFdBQU9BLEdBQVA7QUFDRDs7QUFDRCxNQUFJbkIsU0FBUyxDQUFDZSxXQUFWLENBQXNCSSxHQUF0QixDQUFKLEVBQWdDO0FBQzlCQSxJQUFBQSxHQUFHLEdBQUdyQixTQUFTLENBQUNxQixHQUFELENBQWY7QUFDRDs7QUFDRCxTQUFPQSxHQUFHLENBQUNHLE9BQUosQ0FBWXBCLFNBQVMsQ0FBQ0MsSUFBdEIsRUFBNEJELFNBQVMsQ0FBQ0UsRUFBdEMsRUFBMENrQixPQUExQyxDQUFrRCxLQUFsRCxFQUF5RCxHQUF6RCxDQUFQO0FBQ0Q7QUFFRDs7Ozs7Ozs7O0FBT0FKLFNBQVMsQ0FBQ0UsV0FBVixHQUF3QixVQUFVRCxHQUFWLEVBQWU7QUFDckMsU0FBT0EsR0FBRyxJQUFJLFlBQVlJLElBQVosQ0FBaUJKLEdBQWpCLENBQWQ7QUFDRCxDQUZEOztBQUlBSyxNQUFNLENBQUNDLE9BQVAsR0FBaUJQLFNBQWpCIiwic291cmNlUm9vdCI6Ii4uLy4uL2xpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udmVydCBzdHJpbmcgaW50byBzbmFrZSBjYXNlLlxuICogSm9pbiBwdW5jdHVhdGlvbiB3aXRoIHVuZGVyc2NvcmUuXG4gKiBAbWVtYmVyb2YgbW9kdWxlOnN0cmluZ2Nhc2UvbGliXG4gKiBAZnVuY3Rpb24gc25ha2VjYXNlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gU3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBTbmFrZSBjYXNlZCBzdHJpbmcuXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGxvd2VyY2FzZSA9IHJlcXVpcmUoJy4vbG93ZXJjYXNlJylcbmNvbnN0IHVwcGVyY2FzZSA9IHJlcXVpcmUoJy4vdXBwZXJjYXNlJylcblxuY29uc3QgSk9JTkVSID0gJ18nXG5cbmNvbnN0IHJlcGxhY2luZyA9IHtcbiAgZnJvbTogLyhbQS1aXSspL2csXG4gIHRvIChtYXRjaCwgJDEsIG9mZnNldCwgc3JjKSB7XG4gICAgY29uc3QgcHJlZml4ID0gb2Zmc2V0ID09PSAwID8gJycgOiBKT0lORVJcbiAgICBjb25zdCBsZW4gPSAkMS5sZW5ndGhcbiAgICBpZiAobGVuID09PSAxKSB7XG4gICAgICByZXR1cm4gcHJlZml4ICsgbG93ZXJjYXNlKCQxKVxuICAgIH1cbiAgICBjb25zdCBuZXh0ID0gc3JjLnNsaWNlKG9mZnNldCArICQxLmxlbmd0aClcbiAgICBjb25zdCBpc09uZVdvcmQgPSB1cHBlcmNhc2UuaXNVcHBlcmNhc2UoJDEpICYmIG5leHRbMF0gPT09IEpPSU5FUlxuICAgIGlmIChpc09uZVdvcmQpIHtcbiAgICAgIHJldHVybiBwcmVmaXggKyBsb3dlcmNhc2UoJDEpXG4gICAgfVxuICAgIGNvbnN0IHJlcGxhY2VkID1cbiAgICAgIGxvd2VyY2FzZSgkMS5zdWJzdHIoMCwgbGVuIC0gMSkpICsgSk9JTkVSICsgbG93ZXJjYXNlKCQxW2xlbiAtIDFdKVxuICAgIHJldHVybiBwcmVmaXggKyByZXBsYWNlZFxuICB9XG59XG5cbi8qKiBAbGVuZHMgc25ha2VjYXNlICovXG5mdW5jdGlvbiBzbmFrZWNhc2UgKHN0cikge1xuICBpZiAoc25ha2VjYXNlLmlzU25ha2VjYXNlKHN0cikpIHtcbiAgICByZXR1cm4gc3RyXG4gIH1cbiAgc3RyID0gU3RyaW5nKHN0cikucmVwbGFjZSgvW1xcLS46XFxzXS9nLCBKT0lORVIpXG4gIGlmICghc3RyKSB7XG4gICAgcmV0dXJuIHN0clxuICB9XG4gIGlmICh1cHBlcmNhc2UuaXNVcHBlcmNhc2Uoc3RyKSkge1xuICAgIHN0ciA9IGxvd2VyY2FzZShzdHIpXG4gIH1cbiAgcmV0dXJuIHN0ci5yZXBsYWNlKHJlcGxhY2luZy5mcm9tLCByZXBsYWNpbmcudG8pLnJlcGxhY2UoL18rL2csICdfJylcbn1cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgc3RyaW5nIGFyZSBzbmFrZWNhc2UuXG4gKiBAbWVtYmVyb2YgbW9kdWxlOnN0cmluZ2Nhc2UvbGliXG4gKiBAZnVuY3Rpb24gc25ha2VjYXNlLmlzU25ha2VjYXNlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gU3RyaW5nIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IC0gVHJ1ZSBpZiB0aGUgc3RyaW5nIGFyZSBzbmFrZWNhc2UuXG4gKi9cbnNuYWtlY2FzZS5pc1NuYWtlY2FzZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ciAmJiAvXlthLXpfXSskLy50ZXN0KHN0cilcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzbmFrZWNhc2VcbiJdfQ==